name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - documentation/*

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  projects: '**/*.csproj'
  testProjects: '**/*Tests.csproj'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Application'
    pool:
      vmImage: 'windows-latest'
    
    steps:
    # Step 1: Checkout code
    - checkout: self
      displayName: 'Checkout code'
      clean: true
    
    # Step 2: Install .NET SDK
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'
        includePreviewVersions: false
    
    # Step 3: Restore NuGet packages
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(projects)'
        feedsToUse: 'select'
    
    # Step 4: Build solution
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(projects)'
        arguments: '--configuration $(buildConfiguration) --no-restore'
    
    # Step 5: Run tests (if test projects exist)
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: '$(testProjects)'
        arguments: '--configuration $(buildConfiguration) --no-build --verbosity normal'
        publishTestResults: true
      condition: and(succeeded(), ne(variables['testProjects'], ''))
    
    # Step 6: Publish build artifacts
    - task: DotNetCoreCLI@2
      displayName: 'Publish application'
      inputs:
        command: 'publish'
        projects: '$(projects)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build'
        zipAfterPublish: true
    
    # Step 7: Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy_Test
  displayName: 'Deploy to Test Environment'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployTest
    displayName: 'Deploy to Test Environment'
    environment: 'Test'
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download build artifacts
          - download: current
            artifact: drop
            displayName: 'Download build artifacts'
          
          # Extract published files
          - task: ExtractFiles@1
            displayName: 'Extract published files'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/drop/*.zip'
              destinationFolder: '$(Pipeline.Workspace)/extracted'
              cleanDestinationFolder: true
          
          # Display success message (replace with actual deployment later)
          - task: CmdLine@2
            displayName: 'Display deployment info'
            inputs:
              script: |
                echo "âœ… Build completed successfully!"
                echo "ðŸ“¦ Artifacts are ready for deployment"
                echo "ðŸš€ Application would be deployed to test environment here"
                echo "ðŸ”§ Next step: Configure Azure App Service deployment"